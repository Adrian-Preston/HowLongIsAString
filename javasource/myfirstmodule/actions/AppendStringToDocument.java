// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.charset.Charset;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class AppendStringToDocument extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __Document;
	private system.proxies.FileDocument Document;
	private myfirstmodule.proxies.ENUM_AppendStringAction Action;
	private java.lang.String StringToAppend;

	public AppendStringToDocument(IContext context, IMendixObject Document, java.lang.String Action, java.lang.String StringToAppend)
	{
		super(context);
		this.__Document = Document;
		this.Action = Action == null ? null : myfirstmodule.proxies.ENUM_AppendStringAction.valueOf(Action);
		this.StringToAppend = StringToAppend;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.Document = this.__Document == null ? null : system.proxies.FileDocument.initialize(getContext(), __Document);

		// BEGIN USER CODE
		return appendStringToDocument();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "AppendStringToDocument";
	}

	// BEGIN EXTRA CODE
	private String contextObjectName = "AppendStringToDocumentObject";
	
	private Void appendStringToDocument() throws Exception
	{
		IContext context = getContext();

		try
		{
			switch (Action)
			{
				case Initialise:
					File newfile = new File(getTempFilePath());
					if (newfile.exists())
						newfile.delete();
					FileOutputStream newFileStream = new FileOutputStream(newfile, true);
					context.getData().put(contextObjectName, newFileStream);
					break;
					
				case AppendString:
					FileOutputStream outStream = getContextFileObject(context);
					outStream.write(StringToAppend.getBytes(Charset.forName("UTF-8")));
					break;
					
				case Finish:
					FileOutputStream closeFileStream = getContextFileObject(context);
					closeFileStream.close();
					context.getData().remove(contextObjectName);
					File closeFile = new File(getTempFilePath());
					FileInputStream inFileStream = new FileInputStream(closeFile);
					Core.storeFileDocumentContent(getContext(), __Document, inFileStream);
					inFileStream.close();
					closeFile.delete();
					break;
			}
		}
		catch (Exception e)
		{
			Object object = context.getData().get(contextObjectName);
			if ((object != null) && (object instanceof FileOutputStream))
			{
				FileOutputStream deleteFileStream = (FileOutputStream) object;
				deleteFileStream.close();
				context.getData().remove(contextObjectName);
			}
			File deleteFile = new File(getTempFilePath());
			if (deleteFile.exists())
				deleteFile.delete();
		}
		
		return null;
	}

	private FileOutputStream getContextFileObject(IContext context) throws CoreException
	{
		Object object = context.getData().get(contextObjectName);
		if ((object == null) || !(object instanceof FileOutputStream))
			throw new CoreException("Failed to locate " + contextObjectName + " in context");
		return (FileOutputStream) object;
	}
	
	private String getTempFilePath() throws Exception
	{
		String tempPath = System.getProperty("java.io.tmpdir");
		String filePath = tempPath + "/Doc-" + Document.getFileID() + ".tmp";
		return filePath;
	}
	// END EXTRA CODE
}
