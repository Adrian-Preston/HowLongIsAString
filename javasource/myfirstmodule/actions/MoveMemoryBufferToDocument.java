// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class MoveMemoryBufferToDocument extends CustomJavaAction<java.lang.Void>
{
	private IMendixObject __FileDocument;
	private system.proxies.FileDocument FileDocument;

	public MoveMemoryBufferToDocument(IContext context, IMendixObject FileDocument)
	{
		super(context);
		this.__FileDocument = FileDocument;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.FileDocument = this.__FileDocument == null ? null : system.proxies.FileDocument.initialize(getContext(), __FileDocument);

		// BEGIN USER CODE
		return moveMemoryBufferToDocument();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "MoveMemoryBufferToDocument";
	}

	// BEGIN EXTRA CODE
	private Void moveMemoryBufferToDocument()
	{
		try
		{
			// Make a buffer and store in the context if not already there and ensure stream is flushed
			ByteArrayOutputStream output = (ByteArrayOutputStream) getContext().getVariables().computeIfAbsent("AppendStringToMemoryBufferOutput",
					(k) -> new ByteArrayOutputStream());
			BufferedWriter writer = (BufferedWriter) getContext().getVariables().computeIfAbsent("AppendStringToMemoryBufferWriter",
					(k) -> new BufferedWriter(new OutputStreamWriter(output)));
			writer.flush();

			// Drop the buffer into the FileDocument
			Core.storeFileDocumentContent(getContext(), __FileDocument, new ByteArrayInputStream(output.toByteArray()));
			
			// Delete the buffer
			getContext().getVariables().remove("AppendStringToMemoryBufferWriter");
			getContext().getVariables().remove("AppendStringToMemoryBufferOutput");
		}
		catch (IOException e)
		{
			throw new RuntimeException(e);
		}

		return null;
	}
	// END EXTRA CODE
}
